//
// kernel.cpp
//
#include "kernel.h"
#include "snakepit.h"
#include <circle/string.h>
#include <circle/util.h>
#include <assert.h>

// Uncomment the line below to see the individual codes generated by the
//   keycode translation.
//#define EXPAND_CHARACTERS

static const char FromKernel[] = "snakepit kernel";

CKernel *CKernel::s_pThis = 0;

CKernel::CKernel (void)
:	m_Screen (m_Options.GetWidth (), m_Options.GetHeight ()),
	m_Timer (&m_Interrupt),
	m_Logger (m_Options.GetLogLevel (), &m_Timer),
	m_USBHCI (&m_Interrupt, &m_Timer, TRUE),		// TRUE: enable plug-and-play
	keyboard (nullptr),
	m_ShutdownMode (ShutdownNone)
{
	s_pThis = this;

	m_ActLED.Blink (5);	// show we are alive
}

CKernel::~CKernel (void)
{
	s_pThis = 0;
}

boolean CKernel::Initialize (void)
{
	boolean bOK = TRUE;

	if (bOK)
	{
		bOK = m_Screen.Initialize ();
	}

	if (bOK)
	{
		bOK = m_Serial.Initialize (115200);
	}

	if (bOK)
	{
		CDevice *pTarget = m_DeviceNameService.GetDevice (m_Options.GetLogDevice (), FALSE);
		if (pTarget == 0)
		{
			pTarget = &m_Screen;
		}

		bOK = m_Logger.Initialize (pTarget);
	}

	if (bOK)
	{
		bOK = m_Interrupt.Initialize ();
	}

	if (bOK)
	{
		bOK = m_Timer.Initialize();
	}

	if (bOK)
	{
		bOK = m_USBHCI.Initialize();
	}
 
	return bOK;
}

TShutdownMode CKernel::Run (void)
{
	bool ok;

	m_Logger.Write (FromKernel, LogNotice, "Compile time: " __DATE__ " " __TIME__);
	m_Logger.Write (FromKernel, LogNotice, "Finding keyboard");
	get_keyboard();

	Game game(m_DeviceNameService, m_Screen, m_Timer, m_Logger, keyboard);
	ok = game.init();
	if (ok)
	{
		game.go();
	}
	else
	{
		m_Logger.Write (FromKernel, LogError, "Game initialization failed");
	}

	m_Logger.Write (FromKernel, LogError, "Halting");

	return ShutdownHalt;
}

void CKernel::get_keyboard()
{
	m_Logger.Write (FromKernel, LogNotice, "Ensure a keyboard is plugged in - searching ...");
    if (keyboard == nullptr)
    {
        boolean updated = m_USBHCI.UpdatePlugAndPlay();
        if (updated)
        {
            keyboard = (CUSBKeyboardDevice *)m_DeviceNameService.GetDevice("ukbd1", FALSE);
            if (keyboard != nullptr)
            {
                m_Logger.Write(FromKernel, LogNotice, "Keyboard found");
                keyboard->RegisterKeyPressedHandler(KeyPressedHandler);
                keyboard->RegisterKeyReleasedHandler(KeyReleasedHandler);
                keyboard->RegisterRemovedHandler(KeyboardRemovedHandler);
                keyboard->RegisterShutdownHandler(KeyboardShutdownHandler);
            }
        }
    }
}
